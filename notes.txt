TestNG Annotations
==================
@Test denotes a method as test case

If no testsuite was specified, then testng will create a temp testsuite on its own
it calls it default testsuite

For slf4j issues, you always need at least 2:
the main api, and the 2nd+ libs you need, for example

<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>2.0.3</version>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-nop</artifactId>
    <version>2.0.3</version>
    <scope>test</scope>
</dependency>

Assertions
==========
Assert.assertEquals(1, 2, "hello asset");
adding a message to the asset output is good, it help with issue triage later

there are many other Asserts, we have (most widely used)
assertTrue
assertFalse
assetNull
assertNotEquals

When an assertions fails, the test is aborted, the method exists but not the classes
i.e if a class has other test methods, they will execute as well

however, when a method exists, all remaining intructions in it do not get executed

These assertions are called "hard assertions"

Soft Assertions
---------------
SoftAssert sa = new SoftAssert();
the you use the object "sa" instead of "Assert"
But if you run the test as is, the test will show as passing
at the end of the method, you must call assertAll()
sa.assertAll()

Basic Annotations
=================
@BeforeMethod
public void setUp(){...}
method name does not have to be setUp, what is important is the annotation
=> called before every method

@AfterMethod
public void tearDown(){...}
=> called after every method
=> will be called even if method exits because of a hard assertion failure

We use these methods to avoind code repetition

@BeforeClass => executes before any method in the class executes, including @BeforeMethod
@AfterClass => executes after the last method in the class executes, include the @AfterMethod

TestNg XML Config
=================
Example:
<suite name="sanity test suite">
    <test name="release 2019.5 testing">
        <classes>
            <class name="com.project.tests.EBayHomeSanity"></class>
            <class name="com.project.tests.EBayHomeSanitySoftAssert"></class>
            <class name="com.project.pages.EBayHomeSanityMain"></class>
        </classes>
    </test>
</suite>

A suite can have mutiple <test>
a <test> can have multiple classes in it
test here refers to the testing type we are performing

so for testNG, the class is not considered a Suite

For the full possible Configs using the XML file, refer to:
https://testng.org/doc/documentation-main.html#testng-xml

and
https://testng.org/doc/documentation-main.html#methods

IMPORTANT: you can point to any package you want, it does not have to be in the Test Sources Root Directory "test/java"

For example, the below test class is in main/java
<class name="com.project.pages.EBayHomeSanityMain"></class>

=> you might need this if you want to package your tests in a jar, as the "test" Directory normally gets ingnored when packaging the jar file

specifying select methods to run
<class name="test.Test1">
  <methods>
    <include name="m1" />
    <include name="m2" />
  </methods>
</class>

we also have <exclude>

More Annotations
================

<suite name="sanity test suite"> => @BeforeSuite and @AfterSuite
    <test name="release 2019.5 testing"> => @BeforeTest and @AfterTest

For page Factory in Selenium
============================
The below is for PageFactory
----------------------------
create a class TestObjectClassElements
then set the locators: 
@FindBy(css="...") public WebElement myButton, this is a css locator, there are other types of locators
and a driver
WebDriver driver;

then in the constructor
public TestObjectClassElements(WebDriver driver) {
  this.driver = driver;
  PageFactory.initElements(driver, this);
}

Then when you need it, simply call it instantiate a new TestObjectClassElements object
Usually 1 Class containing all the elements per page as well, it can be split into multiple classes of course

PageObjectModel
---------------
You do no call the elements from the PageFactory class directly, you need 1 more middle layer

TestObjectClassPage -> 1 class per page

create the class, declare the web elements you want to use, usually 1 Class containing all the elements per page as well
Then you define a method per action that the user does, or event a method

public class TestObjectClassPage {
  WebDriver driver;
  TestObjectClassElements elements;

  public TestObjectClassPage(WebDriver driver) {
    this.driver = driver;
    this.elements = new TestObjectClassElements(driver);
  }

  //Then you define a method per action that the user does
  public void clickSearchButton() {
    
  }
}

Then in the test, you use the TestObjectClassPage to do the work

When doing an action, there no need to return, so public void myAction() {...}
When doind a check, we need to return the status/data of the element being fetched, for example:
public boolean isSearchButtonEnabled() {
  return this.elements.searchButton.isEnabled();
}

So to summarize:
ElementsClass -> PageClass -> TestClass
it is a 3 layer structure

Automation Framework Design
===========================
Base Test Class
---------------
Create a base class that contains the setups and teardowns
better make the class as abstract, as normally, it only contains setup and teardowns

@BeforeX and @AfterX methods get inherited with their annotations

in the base test class, we do not go about creating the pages, instead we group them in Libraries

Page Library
------------
The page Library is simply a class (say we call it PageLib) that instantiates TestObjectClassPage objects and has getter methods that return them
Most of these class require a driver, so you will be passing it nearly everyWhere

Then we create an app Library class (say we call it AppLib) that instantiates the PageLib class (and other page Library classes)
with getter method to return the PageLib object

then in te base class, we create an object of AppLib

The in the abstract base test class
we instantiate an AppLib Object
and we add a getter method to returns the AppLib Object

So to summarize (UPDATED):
ElementsClass -> PageClass -> PageLib -> AppLib -> abstract BaseTestClass -> TestClass

Flow Library
------------
a flow library encapsulates the code related to navigating to a uLR

public void visitUrl(String url) {
  this.driver.get(url)
}

so you create said class, then you instantiate it in the AppLib class
AppLib is alwasy the entry point for everything

So to summarize (UPDATED again):
ElementsClass -> PageClass -> {PageLib, FlowLib} -> AppLib -> abstract BaseTestClass -> TestClass

Execute tests in parallel
=========================
<suite name="sanity test suite" parallel="classes" thread-count="2">
    <test name="release 2019.5 testing">
        <classes>
            <class name="com.project.tests.EBayHomeSanity"></class>
            <class name="com.project.tests.EBayHomeSanitySoftAssert"></class>
            <class name="com.project.pages.EBayHomeSanityMain"></class>
        </classes>
    </test>
</suite>

parallel="classes" or "test" (as in the <test> tag level) or "method" => determines what runs in parrallel

TestNG output Reports
=====================
TestNG already comes with a HTML report generator -> it is basic bt enough
additional libs can be used (up to you to seach for) if you want to generate better looking reports
There probably is an XML files somewhere that contains the full test results (data form)

Groups
======
groups can be added using the @Test annotation
@Test(group = {"g1", "g2"})

PS: the test annotation can also be added at Class level, and not jut at method level

A goo practice with TestNG is to use @BeforeMethod and @AfterMethod instead of @BeforeTest and @AfterTest as the latter can lead to some classes not getting common information being set up, this also makes the methods independent of each other, especially when running tests in parallel


<suite name="sanity test suite" parallel="classes" thread-count="2">
    <groups>
        <run>
            <include name="g1"/> => telling testng which group of tests to run when using a certian XML config
        </run>
    </groups>
    <test name="release 2019.5 testing">
        <classes>
            <class name="com.project.tests.EBayHomeSanity"></class>
            <class name="com.project.tests.EBayHomeSanitySoftAssert"></class>
            <class name="com.project.pages.EBayHomeSanityMain"></class>
        </classes>
    </test>
</suite>

Also, in order to insude that a @BeforeX tagged method always run, we can specify that, for example
@BeforeMethod(alwaysRun=true)

refer to this documentation for the possible options that annotations can take
https://testng.org/doc/documentation-main.html#annotations

TestNG Parameters
=================
<suite name="sanity test suite" parallel="classes" thread-count="2">
    <parameters>
        <parameter name"browser" value="chrome">
    </Parameters>
    <groups>
        <run>
            <include name="g1"/> => telling testng which group of tests to run when using a certian XML config
        </run>
    </groups>
    <test name="release 2019.5 testing">
        <classes>
            <class name="com.project.tests.EBayHomeSanity"></class>
            <class name="com.project.tests.EBayHomeSanitySoftAssert"></class>
            <class name="com.project.pages.EBayHomeSanityMain"></class>
        </classes>
    </test>
</suite>

<parameter name"browser" value="chrome"> => adding params that are common to all tests, they can be configs or user login creds or even whih browser to run it on

In order to make a parameter available to a method, you use annotation 
@Parameters({"theParamName", "otherParameter"})
public void setUp(String theParamName, String otherParameter) {...}
=> the arguments name does not have th match the parameter name, are matched based on the order they are written in

We can also make these parameters optional to be specified in the xml files by given them default values and flagging them accordingly
=> this is also useful if we are not running the tests from the XML file

@Parameters({"theParamName", "otherParameter"})
public void setUp(@Optional("Chrome") String theParamName, String otherParameter) {...}

We can also add these parms at <test> level, not just at <suite> level... <test> level params overwrite <suite> level paramters

Test Dependency
---------------
Test can be made to run in order using:
dependsOnGroups The list of groups this method depends on.
dependsOnMethods The list of methods this method depends on.

@Test(dependsOnMethods = {"methodName1", "methodName2"})

in case methodName1 or methodName2 fail, then the test in question gets skipped
to make the test run anyway, but always after methodName1 and methodName2, then we also give it the option alwaysRun = true

@Ignore => test method or class level, the tests gets ignored
skipped vs ignored:
ignored: test never considered for execution
skipped: test is considered but for some reason, it gets skipped

Data Driven tests
=================
for this we use @DataProvider annotation to specify a method as a data provider
that method can contains the data itself, or it can read the data from DB, excel files, csv file.... etc and return it

we can put that in its own class then:
either extend the class, or instantiate it (depending on how we implemented it)

then, on top of the test method:
@Test(dataProvider = "dataProviderMethodName", dataProviderClass = DataProviderClassName.class)

dataProviderClass = DataProviderClassName.class => this is needed in case we put out data provider in a separate class

By default, the data provider will be looked for in the current test class or one of its base classes. If you want to put your data provider in a different class, it needs to be a static method or a class with a non-arg constructor, and you specify the class where it can be found in the dataProviderClass attribute
thus no need to actually extend from the data provider class you created or even instantiate it

the in the test method: public void testMethod(Type arg, Type arg2, ...etc) in the same order they are returned
the test method will then iterate for x number of times (depending on how much data it is fed)
we say that the method is being driven by the data, or that data is driving the method, hence data driven testing

Remark on Selenium driver:
you can use implicit wait instead of Thread.sleep(x) => x is in milliseconds

In the abstract base calss, in the @BeforeMethod:
driver.manage().timeouts().implicitlyWait(3, TimeUnit.seconds)

For the URLs => best set in the Page classes, that way they are bound to their relative classes
then add a simple getter method for it
